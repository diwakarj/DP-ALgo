/*
#include <iostream>
#include<stdio.h>

// K[][] table formation is not clear

using namespace std;

int mymax(int a, int b)
{
	return (a > b) ? a : b;
}



int Knapsack(int W, int wt[], int val[], int n)
{
	int i;

		int K[4][51];

	for (int i = 0; i <= n; i++)
	{
		for (int w = 0; w <= W; w++)
		{
			if (i == 0 || w == 0)
				K[i][w] = 0;
			else if (wt[i - 1] <= W)
				K[i][w] = mymax(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
			else
				K[i][w] = K[i - 1][w];
		}
     }

	return K[n][W];
}




int main()
{
	int val[] = { 60, 100, 120 };
	int wt[] = { 10, 20, 30 };
	int  W = 50;

	int n = sizeof(wt) / sizeof(wt[0]);

	cout << "the optimal weight is  : " << Knapsack(W, wt, val, n);

	getchar();
	return 0;

}

*/
